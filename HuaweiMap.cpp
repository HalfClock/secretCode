// HuaweiMap.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include "pch.h"
#include <iostream>
#include <math.h>
#include <iomanip>
#define CrossNum 64
using namespace std;

int cross[CrossNum+1][5] =
{ {0,0,0,0,0},
{1, 5000, 5007, -1, -1},
{2, 5001, 5008, 5000, -1},
{3, 5002, 5009, 5001, -1},
{4, 5003, 5010, 5002, -1},
{5, 5004, 5011, 5003, -1},
{6, 5005, 5012, 5004, -1},
{7, 5006, 5013, 5005, -1},
{8, -1, 5014, 5006, -1},
{9, 5015, 5022, -1, 5007},
{10, 5016, 5023, 5015, 5008},
{11, 5017, 5024, 5016, 5009},
{12, 5018, 5025, 5017, 5010},
{13, 5019, 5026, 5018, 5011},
{14, 5020, 5027, 5019, 5012},
{15, 5021, 5028, 5020, 5013},
{16, -1, 5029, 5021, 5014},
{17, 5030, 5035, -1, 5022},
{18, -1, 5036, 5030, 5023},
{19, 5031, 5037, -1, 5024},
{20, 5032, 5038, 5031, 5025},
{21, 5033, -1, 5032, 5026},
{22, -1, 5039, 5033, 5027},
{23, 5034, -1, -1, 5028},
{24, -1, 5040, 5034, 5029},
{25, 5041, 5048, -1, 5035},
{26, 5042, 5049, 5041, 5036},
{27, 5043, 5050, 5042, 5037},
{28, 5044, 5051, 5043, 5038},
{29, 5045, 5052, 5044, -1},
{30, 5046, 5053, 5045, 5039},
{31, 5047, 5054, 5046, -1},
{32, -1, 5055, 5047, 5040},
{33, 5056, 5062, -1, 5048},
{34, 5057, 5063, 5056, 5049},
{35, -1, 5064, 5057, 5050},
{36, 5058, 5065, -1, 5051},
{37, 5059, 5066, 5058, 5052},
{38, 5060, 5067, 5059, 5053},
{39, 5061, 5068, 5060, 5054},
{40, -1, 5069, 5061, 5055},
{41, 5070, 5077, -1, 5062},
{42, 5071, 5078, 5070, 5063},
{43, 5072, 5079, 5071, 5064},
{44, 5073, 5080, 5072, 5065},
{45, 5074, 5081, 5073, 5066},
{46, 5075, 5082, 5074, 5067},
{47, 5076, -1, 5075, 5068},
{48, -1, 5083, 5076, 5069},
{49, 5084, 5090, -1, 5077},
{50, 5085, 5091, 5084, 5078},
{51, 5086, 5092, 5085, 5079},
{52, 5087, 5093, 5086, 5080},
{53, -1, 5094, 5087, 5081},
{54, 5088, 5095, -1, 5082},
{55, 5089, 5096, 5088, -1},
{56, -1, 5097, 5089, 5083},
{57, 5098, -1, -1, 5090},
{58, 5099, -1, 5098, 5091},
{59, 5100, -1, 5099, 5092},
{60, 5101, -1, 5100, 5093},
{61, 5102, -1, 5101, 5094},
{62, 5103, -1, 5102, 5095},
{63, 5104, -1, 5103, 5096},
{64, -1, -1, 5104, 5097} };

/*
int cross[CrossNum+ 1][5] =
{ {0, 0, 0, 0, 0},
{ 1, 5000, 5009, -1, -1 },
{ 2, 5001, 5010, 5000, -1 },
{ 3, 5002, 5011, 5001, -1 },
{ 4, 5003, 5012, 5002, -1 },
{ 5, 5004, 5013, 5003, -1 },
{ 6, 5005, 5014, 5004, -1 },
{ 7, 5006, 5015, 5005, -1 },
{ 8, 5007, 5016, 5006, -1 },
{ 9, 5008, 5017, 5007, -1 },
{ 10, -1, 5018, 5008, -1 },
{ 11, 5019, 5028, -1, 5009 },
{ 12, 5020, 5029, 5019, 5010 },
{ 13, 5021, -1, 5020, 5011 },
{ 14, 5022, 5030, 5021, 5012 },
{ 15, 5023, 5031, 5022, 5013 },
{ 16, 5024, 5032, 5023, 5014 },
{ 17, 5025, 5033, 5024, 5015 },
{ 18, 5026, 5034, 5025, 5016 },
{ 19, 5027, 5035, 5026, 5017 },
{ 20, -1, 5036, 5027, 5018 },
{ 21, 5037, 5043, -1, 5028 },
{ 22, -1, 5044, 5037, 5029 },
{ 23, 5038, 5045, -1, -1 },
{ 24, 5039, 5046, 5038, 5030 },
{ 25, 5040, -1, 5039, 5031 },
{ 26, -1, 5047, 5040, 5032 },
{ 27, 5041, -1, -1, 5033 },
{ 28, -1, 5048, 5041, 5034 },
{ 29, 5042, -1, -1, 5035 },
{ 30, -1, 5049, 5042, 5036 },
{ 31, 5050, 5059, -1, 5043 },
{ 32, 5051, 5060, 5050, 5044 },
{ 33, 5052, 5061, 5051, 5045 },
{ 34, 5053, 5062, 5052, 5046 },
{ 35, 5054, 5063, 5053, -1 },
{ 36, 5055, 5064, 5054, 5047 },
{ 37, 5056, 5065, 5055, -1 },
{ 38, 5057, -1, 5056, 5048 },
{ 39, 5058, 5066, 5057, -1 },
{ 40, -1, 5067, 5058, 5049 },
{ 41, 5068, 5076, -1, 5059 },
{ 42, 5069, 5077, 5068, 5060 },
{ 43, -1, -1, 5069, 5061 },
{ 44, 5070, 5078, -1, 5062 },
{ 45, 5071, 5079, 5070, 5063 },
{ 46, 5072, 5080, 5071, 5064 },
{ 47, 5073, 5081, 5072, 5065 },
{ 48, 5074, 5082, 5073, -1 },
{ 49, 5075, 5083, 5074, 5066 },
{ 50, -1, 5084, 5075, 5067 },
{ 51, 5085, 5094, -1, 5076 },
{ 52, 5086, 5095, 5085, 5077 },
{ 53, 5087, 5096, 5086, -1 },
{ 54, 5088, 5097, 5087, 5078 },
{ 55, 5089, 5098, 5088, 5079 },
{ 56, 5090, 5099, 5089, 5080 },
{ 57, 5091, -1, 5090, 5081 },
{ 58, 5092, 5100, 5091, 5082 },
{ 59, 5093, -1, 5092, 5083 },
{ 60, -1, 5101, 5093, 5084 },
{ 61, 5102, 5110, -1, 5094 },
{ 62, 5103, 5111, 5102, 5095 },
{ 63, 5104, 5112, 5103, 5096 },
{ 64, 5105, 5113, 5104, 5097 },
{ 65, -1, 5114, 5105, 5098 },
{ 66, 5106, 5115, -1, 5099 },
{ 67, 5107, 5116, 5106, -1 },
{ 68, 5108, 5117, 5107, 5100 },
{ 69, 5109, 5118, 5108, -1 },
{ 70, -1, 5119, 5109, 5101 },
{ 71, 5120, 5129, -1, 5110 },
{ 72, 5121, -1, 5120, 5111 },
{ 73, 5122, 5130, 5121, 5112 },
{ 74, 5123, 5131, 5122, 5113 },
{ 75, 5124, 5132, 5123, 5114 },
{ 76, 5125, 5133, 5124, 5115 },
{ 77, 5126, -1, 5125, 5116 },
{ 78, 5127, 5134, 5126, 5117 },
{ 79, 5128, -1, 5127, 5118 },
{ 80, -1, 5135, 5128, 5119 },
{ 81, 5136, 5144, -1, 5129 },
{ 82, 5137, 5145, 5136, -1 },
{ 83, 5138, 5146, 5137, 5130 },
{ 84, 5139, 5147, 5138, 5131 },
{ 85, -1, 5148, 5139, 5132 },
{ 86, 5140, -1, -1, 5133 },
{ 87, 5141, 5149, 5140, -1 },
{ 88, 5142, 5150, 5141, 5134 },
{ 89, 5143, 5151, 5142, -1 },
{ 90, -1, 5152, 5143, 5135 },
{ 91, 5153, -1, -1, 5144 },
{ 92, 5154, -1, 5153, 5145 },
{ 93, 5155, -1, 5154, 5146 },
{ 94, 5156, -1, 5155, 5147 },
{ 95, 5157, -1, 5156, 5148 },
{ 96, 5158, -1, 5157, -1 },
{ 97, 5159, -1, 5158, 5149 },
{ 98, 5160, -1, 5159, 5150 },
{ 99, 5161, -1, 5160, 5151 },
{ 100, -1, -1, 5161, 5152 } };
*/
class C
{
	public: int up, right, down, left;
	C(int a[5])//没有用到
	{
		this->up = a[1]; this->right = a[2]; this->down = a[3]; this->left = a[4];
	}
	C()
	{
	}
	bool ifUp(C c)
	{
		if (this->up == c.down&&this->up!=-1)
		{
			return true;
		}
		else return false;
	}
	bool ifDown(C c)
	{
		if (this->down == c.up&&this->down != -1)
		{
			return true;
		}
		else return false;
	}	
	bool ifRight(C c)
	{
		if (this->right == c.left&&this->right != -1)
		{
			return true;
		}
		else return false;
	}	
	bool ifLeft(C c)
	{
		if (this->left == c.right&&this->left != -1)
		{
			return true;
		}
		else return false;
	}
	void printC()//输出基本信息，没有用到
	{
		cout << up << " " << right << " " << down << " " << left<<endl;
	}
};
int a[11][11];//start from 1 ，是地图
C c[CrossNum+1];//是路口对象数组

void printA(int n)//输出地图的路口
{
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			cout << a[i][j] << " ";
		}
		cout << endl;
	}

}
void printAwithRoad(int n)//输出地图的路口和道路
{
	for (int i = 1; i <= n; i++)
	{
		cout << "  ";
		for (int j=1 ; j <= n; j++)
		{
			cout << a[i][j] << " ";//路口id
			if (c[a[i][j]].right != -1 )//如果路口右边有道路，则输出道路id
			{
				cout << "-" << c[a[i][j]].right << "- ";
			}
			else if(j != n){ cout << "-0000- "; }//最右侧不输出
		}
		cout << endl;
		for (int k = 1; k <= n; k++)
		{
			if (c[a[i][k]].down != -1)//如果路口下边有道路，则输出道路id
			{
				cout  << c[a[i][k]].down<<"      " ;
			}
			else if(i!=n){ cout << "0000      "; }//最下侧不输出
		}
		cout << endl;
	}

}
bool ifAnotfull(int n)//地图数组a还有没有被填满
{
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			if (a[i][j] == 0)
				return true;
		}
	}
	return false;
}
int main()
{
    std::cout << "Hello ZHH!\n";

	int n = sqrt(CrossNum);
	for (int i = 1; i <= n*n; i++)
	{
		c[i].up = cross[i][1]; c[i].right = cross[i][2]; c[i].down = cross[i][3]; c[i].left = cross[i][4];
	}//将数组文件赋值到对象数组中，这里默认第一列就是上方向，第二列是右方向，第三列是下方向，第四列是左方向

	a[n][1] = 1;//初始化地图左下角的值为路口1

	while(ifAnotfull(n))//路口地图没有填满路口时，则一直寻找并填充，这里只管路口。一般会运行n-次
	for (int i = 1; i <= n; i++)//行
	{
		for (int j = 1; j <= n; j++)//列
		{
			if (a[i][j] != 0)//不为0说明已经被填入路口id了，记为已填数组A
			{
				for (int k = 1; k <= n*n; k++)//在对象数组中从头到尾遍历寻找
				{
					if (c[a[i][j]].ifUp(c[k]))//如果已填数组A的上方的确是第k个路口，则在a路口地图中填入
					{
						a[i - 1][j] = k;
					}
					else if (c[a[i][j]].ifRight(c[k]))//因为有的道路处是断的，所以上下左右都会被检测
					{
						a[i][j + 1] = k;
					}
					else if (c[a[i][j]].ifDown(c[k]))
					{
						a[i + 1][j] = k;
					}
					else if (c[a[i][j]].ifLeft(c[k]))
					{
						a[i][j - 1] = k;
					}
				}
			}
		}
	}
	//printA(n);//输出带有路口的地图
	printAwithRoad(n);//输出带有路口和道路的地图
}


